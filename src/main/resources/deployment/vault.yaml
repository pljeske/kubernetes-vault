apiVersion: v1
kind: Namespace
metadata:
  name: kubernetes-vault

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kubernetes-vault
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
#  - apiGroups: ["apiextensions.k8s.io"]
#    resources: ["customresourcedefinitions"]
#    verbs: ["*"]
#  - apiGroups: ["commons.init.de"]
#    resources: ["licenses"]
#    verbs: ["*"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-vault
  namespace: kubernetes-vault

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: operator-admin
subjects:
  - kind: ServiceAccount
    name: kubernetes-vault
    namespace: kubernetes-vault
roleRef:
  kind: ClusterRole
  name: kubernetes-vault
  apiGroup: ""

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubernetes-vault
  namespace: kubernetes-vault
spec:
  selector:
    matchLabels:
      app: kubernetes-vault
  replicas: 1 # we always run a single replica of the operator to avoid duplicate handling of events
  strategy:
    type: Recreate # during an upgrade the operator will shut down before the new version comes up to prevent two instances running at the same time
  template:
    metadata:
      labels:
        app: kubernetes-vault
    spec:
      serviceAccount: kubernetes-vault # specify the ServiceAccount under which's RBAC persmissions the operator will be executed under
      containers:
        - name: operator
          image: docker.io/pljc/kubernetes-vault:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /actuator/health # when this returns 200 the operator is considered up and running
              port: 8081
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 30
            timeoutSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  namespace: kubernetes-vault
  creationTimestamp: null
  labels:
    app: kubernetes-vault
  name: kubernetes-vault
spec:
  ports:
    - name: "8080"
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: kubernetes-vault
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubernetes-vault-ingress
  namespace: kubernetes-vault
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kubernetes-vault
                port:
                  number: 8080
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  namespace: kubernetes-vault
#  creationTimestamp: null
#  labels:
#    app: fake-smtp
#  name: fake-smtp
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: fake-smtp
#  strategy: {}
#  template:
#    metadata:
#      creationTimestamp: null
#      labels:
#        app: fake-smtp
#    spec:
#      containers:
#        - image: brokenpip3/fake-smtp:2
#          name: fake-smtp
#          ports:
#            - containerPort: 10025
#              protocol: TCP
#          resources: {}
#          #env:
#          #- name: "NOLOG"
#          #  value: "1"
#---
#apiVersion: v1
#kind: Service
#metadata:
#  namespace: kubernetes-vault
#  creationTimestamp: null
#  labels:
#    app: fake-smtp
#  name: fake-smtp
#spec:
#  ports:
#    - name: "10025"
#      port: 10025
#      protocol: TCP
#      targetPort: 10025
#  selector:
#    app: fake-smtp
#  type: ClusterIP
#---